"""Update models

Revision ID: 905726942c79
Revises: 
Create Date: 2025-05-14 19:04:04.523879

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '905726942c79'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('coin_predictions')
    op.drop_table('model_errors')
    op.alter_column('coin_prices', 'timestamp',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('coin_prices', 'open',
               existing_type=sa.NUMERIC(),
               type_=sa.Float(),
               nullable=True)
    op.alter_column('coin_prices', 'high',
               existing_type=sa.NUMERIC(),
               type_=sa.Float(),
               nullable=True)
    op.alter_column('coin_prices', 'low',
               existing_type=sa.NUMERIC(),
               type_=sa.Float(),
               nullable=True)
    op.alter_column('coin_prices', 'close',
               existing_type=sa.NUMERIC(),
               type_=sa.Float(),
               nullable=True)
    op.alter_column('coin_prices', 'volume',
               existing_type=sa.NUMERIC(),
               type_=sa.Float(),
               nullable=True)
    op.drop_column('coin_prices', 'market_cap')
    op.create_unique_constraint(None, 'coins', ['name'])
    op.create_unique_constraint(None, 'coins', ['symbol'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'coins', type_='unique')
    op.drop_constraint(None, 'coins', type_='unique')
    op.add_column('coin_prices', sa.Column('market_cap', sa.NUMERIC(), autoincrement=False, nullable=False))
    op.alter_column('coin_prices', 'volume',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(),
               nullable=False)
    op.alter_column('coin_prices', 'close',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(),
               nullable=False)
    op.alter_column('coin_prices', 'low',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(),
               nullable=False)
    op.alter_column('coin_prices', 'high',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(),
               nullable=False)
    op.alter_column('coin_prices', 'open',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(),
               nullable=False)
    op.alter_column('coin_prices', 'timestamp',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.create_table('model_errors',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('coin_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('actual_price', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('predicted_price', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('error', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['coin_id'], ['coins.id'], name='model_errors_coin_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='model_errors_pkey')
    )
    op.create_table('coin_predictions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('coin_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('predicted_price', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('prediction_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['coin_id'], ['coins.id'], name='coin_predictions_coin_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='coin_predictions_pkey')
    )
    # ### end Alembic commands ###
